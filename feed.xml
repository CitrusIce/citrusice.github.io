<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="https://citrusice.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://citrusice.github.io/" rel="alternate" type="text/html" /><updated>2025-07-09T18:07:27+08:00</updated><id>https://citrusice.github.io/feed.xml</id><title type="html">Nqd8VId6</title><subtitle>my blog
</subtitle><entry><title type="html">旁路由科学上网配置笔记</title><link href="https://citrusice.github.io/posts/sub-router-with-tproxy-configuration/" rel="alternate" type="text/html" title="旁路由科学上网配置笔记" /><published>2025-07-09T18:05:36+08:00</published><updated>2025-07-09T18:05:36+08:00</updated><id>https://citrusice.github.io/posts/sub-router-with-tproxy-configuration</id><content type="html" xml:base="https://citrusice.github.io/posts/sub-router-with-tproxy-configuration/">&lt;p&gt;之前家里科学上网一直是通过刷了个openwrt的路由装了openclash来上网的，但是受限于openwrt路由器的性能，操作openclash很是不方便，总觉得网速也受到影响，因此准备在家中内网的linux主机上配置一个旁路由用于科学上网。&lt;/p&gt;

&lt;p&gt;网络环境：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;192.168.2.1 路由器&lt;/li&gt;
  &lt;li&gt;192.168.2.2 旁路由 （这里我是&lt;strong&gt;arch系&lt;/strong&gt;）&lt;/li&gt;
  &lt;li&gt;192.168.2.100 用户主机&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;首先是配置clash，当前clash已经改名为mihomo，直接安装&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yay &lt;span class=&quot;nt&quot;&gt;-Sy&lt;/span&gt; mihomo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;实现透明代理有两种方法，一个是tun一个是tproxy，这里我选用tproxy&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;tproxy-port&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;7894&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# You can choose any available port, e.g., 7894 or 9898 [4, 6]&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;routing-mark&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;255&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 这个值对应 iptables 规则中的 0xff&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;dns&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;enable&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;0.0.0.0:53&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;ipv6&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;# 禁止DNS解析IPv6&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;enhanced-mode&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;redir-host&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 使用 redir-host 模式&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# 这些 DNS 用于解析代理服务器域名（重要！）&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;default-nameserver&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;114.114.114.114&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;223.5.5.5&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;1.1.1.1&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;nameserver&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;114.114.114.114&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;8.8.8.8&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;fallback&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 防止 DNS 污染&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;1.1.1.1&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;8.8.8.8&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;配置关键在于设置这三部分：tproxy-port/routing-mark以及dns&lt;/p&gt;

&lt;p&gt;我的主机上已经有了systemd-resolved会运行一个stub listener占用了53端口，因此要先配置systemd-resolved，在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/systemd/resolved.conf&lt;/code&gt;的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[Resolve]&lt;/code&gt;部分禁用stub listener并且设置dns服务器为本地地址&lt;/p&gt;

&lt;div class=&quot;language-ini highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;[Resolve]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;DNS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;127.0.0.1&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;DNSStubListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;no&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;另外由于我使用的是manjaro，使用network manager管理网络，我的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/resolv.conf&lt;/code&gt; 会被network manager自动覆盖，因此还需要配置network manager。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nmcli connection show &lt;span class=&quot;nt&quot;&gt;--active&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# NAME                UUID                                  TYPE      DEVICE          &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Wired connection 1  5d78f62e-5624-313a-a89d-7242ca4a3e3b  ethernet  eno1          &lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 把 &quot;Wired connection 1&quot; 替换成你自己的连接名&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 修改 IPv4 DNS&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;nmcli connection modify &lt;span class=&quot;s2&quot;&gt;&quot;Wired connection 1&quot;&lt;/span&gt; ipv4.dns &lt;span class=&quot;s2&quot;&gt;&quot;127.0.0.1&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 修改 IPv6 DNS (可选，但建议设置为空，避免走 IPv6 DNS)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;nmcli connection modify &lt;span class=&quot;s2&quot;&gt;&quot;Wired connection 1&quot;&lt;/span&gt; ipv6.dns &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 关键一步：设置 DNS 模式为“仅使用手动设置的 DNS”&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;nmcli connection modify &lt;span class=&quot;s2&quot;&gt;&quot;Wired connection 1&quot;&lt;/span&gt; ipv4.ignore-auto-dns &lt;span class=&quot;nb&quot;&gt;yes
sudo &lt;/span&gt;nmcli connection modify &lt;span class=&quot;s2&quot;&gt;&quot;Wired connection 1&quot;&lt;/span&gt; ipv6.ignore-auto-dns &lt;span class=&quot;nb&quot;&gt;yes&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 重新激活&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;nmcli connection up &lt;span class=&quot;s2&quot;&gt;&quot;Wired connection 1&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;把mihomo启动起来，测试一下能否正常代理连接&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-x&lt;/span&gt; socks5://127.0.0.1:7890 https://www.google.com &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;接下来配置透明代理，直接抄的网上的，但是需要修改网卡名字、tproxy端口以及clash的标记&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#!/usr/sbin/nft -f

## 清空旧规则
flush ruleset

## 只处理指定网卡的流量，要和ip规则中的接口操持一致
define interface = eno1

## clash的透明代理端口
define tproxy_port = 7894

## clash打的标记（routing-mark）
define clash_mark = 255

## 常规流量标记，ip rule中加的标记，要和ip规则中保持一致，对应 &quot;ip rule add fwmark 1 lookup 100&quot; 中的 &quot;1&quot;
define default_mark = 1

## 本机运行了服务并且需要在公网上访问的tcp端口（本机开放在公网上的端口），仅本地局域网访问的服务端口可不用在此变量中，以半角逗号分隔
define local_tcp_port = {
        3000-4000,
        25565,     
        8000-9000,
        1200,   
}

## 要绕过的局域网内tcp流量经由本机访问的目标端口，也就是允许局域网内其他主机主动设置DNS服务器为其他服务器，而非旁路由
define lan_2_dport_tcp = {
    53     # dns查询
}

## 要绕过的局域网内udp流量经由本机访问的目标端口，也就是允许局域网内其他主机主动设置DNS服务器为其他服务器，而非旁路由；另外也允许局域网内其他主机访问远程的NTP服务器
define lan_2_dport_udp = {
    53,    # dns查询
    123    # ntp端口
}

## 保留ip地址
define private_address = {
    127.0.0.0/8,
    100.64.0.0/10,
    169.254.0.0/16,
    224.0.0.0/4,
    240.0.0.0/4,
    10.0.0.0/8,
    172.16.0.0/12,
    192.168.0.0/16
}

## 大陆ip地址
# include &quot;/var/lib/clash/geoip4_cn.nft&quot;

table ip clash {

    ## 保留ipv4集合
    set private_address_set {
        type ipv4_addr
        flags interval
        elements = $private_address
    }

    ## 大陆ipv4集合
#    set geoip4_cn_set {
#        type ipv4_addr
#        flags interval
#        elements = $geoip4_cn
#    }

    ## prerouting链
    chain prerouting {
        type filter hook prerouting priority filter; policy accept;
        ip protocol { tcp, udp } socket transparent 1 meta mark set $default_mark accept # 绕过已经建立的连接
        meta mark $default_mark goto clash_tproxy                                        # 已经打上default_mark标记的属于本机流量转过来的，直接进入透明代理
        fib daddr type { local, broadcast, anycast, multicast } accept                   # 绕过本地、单播、组播、多播地址
        tcp dport $lan_2_dport_tcp accept                                                # 绕过经由本机到目标端口的tcp流量
        udp dport $lan_2_dport_udp accept                                                # 绕过经由本地到目标端口的udp流量
        ip daddr @private_address_set accept                                             # 绕过目标地址为保留ip的地址
       # ip daddr @geoip4_cn_set accept                                                   # 绕过目标地址为大陆ip的地址
        # ip protocol udp accept                                                         # 绕过全部udp流量（udp不进行透明代理）
        goto clash_tproxy                                                                # 其他流量透明代理到clash
    }

    ## 透明代理
    chain clash_tproxy {
        ip protocol { tcp, udp } tproxy to :$tproxy_port meta mark set $default_mark
    }

    ## output链 (优化后)
    chain output {
        type route hook output priority filter; policy accept;

        # -----------------------------------------------------------------
        # 核心修改：将最关键的绕过规则放在最顶端，确保它们最先被匹配
        # -----------------------------------------------------------------

        # 1. 绝对优先放行：目标是本地回环地址的流量 (修复你遇到的问题)
        #    这是最明确、最可靠的规则，用于防止本机服务（如DNS）被代理。
        ip daddr 127.0.0.1/32 accept

        # 2. 其次放行：Clash 自身发出的、已经打上标记的流量 (防止循环代理)
        meta mark $clash_mark accept

        # 3. 再次放行：目标地址是保留地址/内网地址的流量
        #    这条规则包含了 127.0.0.1，但放在这里作为双重保险，并处理其他内网IP。
        ip daddr @private_address_set accept

        # 4. 放行本机上其他服务的流量
        #    例如，如果你在本机运行了需要公网访问的SSH或Web服务。
        tcp sport $local_tcp_port accept
        
        # -----------------------------------------------------------------
        # 经过以上关键过滤后，剩下的流量才考虑是否需要代理
        # -----------------------------------------------------------------

        # 5. 将剩余的所有TCP/UDP流量标记，准备重路由到 prerouting 链
        ip protocol { tcp, udp } meta mark set $default_mark
    }

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;配置我稍微调整了一下，让大陆ip也走mihomo，然后通过mihomo内部规则再进行分流。&lt;/p&gt;

&lt;p&gt;文件保存成&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mynftables.nft&lt;/code&gt;，启用tproxy还要结合路由规则设置&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 配置透明代理&lt;/span&gt;
ip route add &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;default dev eno1 table 100
ip rule add fwmark 1 lookup 100
nft &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; mynftables.nft
&lt;span class=&quot;c&quot;&gt;# 启用mihomo&lt;/span&gt;
mihomo &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; config.yaml
&lt;span class=&quot;c&quot;&gt;# 测试一下是否生效&lt;/span&gt;
curl ipinfo.io
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;生效后就可以配置成服务了，创建文件&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/systemd/system/mihomo.service&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-ini highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;[Unit]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;Description&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Mihomo tproxy daemon.&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;Wants&lt;/span&gt;       &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;network-online.target subconverter.service&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;After&lt;/span&gt;       &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;network-online.target&lt;/span&gt;

&lt;span class=&quot;nn&quot;&gt;[Service]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;Environment&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;Type&lt;/span&gt;          &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;simple&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;Restart&lt;/span&gt;       &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;always&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;LimitNPROC&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;500&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;LimitNOFILE&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;1000000&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;ExecStartPre&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;sleep 1s&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;ExecStart&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mihomo -f /etc/mihomo/config.yaml&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 启动前先尝试清理，忽略可能的失败 (注意-号的用法)
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;ExecStartPost&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;-ip route del local default dev eno1 table 100&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;ExecStartPost&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;-ip rule del fwmark 1 lookup 100&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 再执行添加操作
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;ExecStartPost&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ip route add local default dev eno1 table 100&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;ExecStartPost&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ip rule add fwmark 1 lookup 100&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;ExecStartPost&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nft -f &amp;lt;mynftables.nft path&amp;gt;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 停止时，确保每个清理步骤都被尝试执行
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;ExecStop&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;-nft flush ruleset&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;ExecStop&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;-ip route del local default dev eno1 table 100&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;ExecStop&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;-ip rule del fwmark 1 lookup 100&lt;/span&gt;

&lt;span class=&quot;nn&quot;&gt;[Install]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;WantedBy&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;multi-user.target&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;启用服务&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl daemon-reload
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;mihomo.service
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl start mihomo.service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;至此这个主机已经可以作为旁路由了，将其他主机的网关手动指向它就可以实现科学上网。在此基础上，我们还可以继续配置路由器的dhcp服务，让dhcp服务自动配置网关到该路由器。&lt;/p&gt;

&lt;p&gt;首先需要将旁路由设置成静态ip，不然路由器的dhcp服务修改后我们的网关会指向自己&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nmcli connection show
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;nmcli connection modify &lt;span class=&quot;s2&quot;&gt;&quot;Wired connection 1&quot;&lt;/span&gt; ipv4.method manual
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;nmcli connection modify &lt;span class=&quot;s2&quot;&gt;&quot;Wired connection 1&quot;&lt;/span&gt; ipv4.method manual ipv4.addresses 192.168.2.2/24 ipv4.gateway 192.168.2.1 
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;nmcli connection up &lt;span class=&quot;s2&quot;&gt;&quot;Wired connection 1&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我的路由器是openwrt，配置dhcp直接在lan口的dhcp服务中添加：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;3,192.168.2.2 # 配置网关
6,192.168.2.2 # 配置dns服务器
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;至此配置结束&lt;/p&gt;</content><author><name></name></author><category term="杂" /><summary type="html">之前家里科学上网一直是通过刷了个openwrt的路由装了openclash来上网的，但是受限于openwrt路由器的性能，操作openclash很是不方便，总觉得网速也受到影响，因此准备在家中内网的linux主机上配置一个旁路由用于科学上网。</summary></entry><entry><title type="html">Termius破解小记</title><link href="https://citrusice.github.io/posts/termius-reversing/" rel="alternate" type="text/html" title="Termius破解小记" /><published>2025-03-13T13:22:55+08:00</published><updated>2025-03-13T13:22:55+08:00</updated><id>https://citrusice.github.io/posts/termius-reversing</id><content type="html" xml:base="https://citrusice.github.io/posts/termius-reversing/">&lt;p&gt;因为windows上一直用的win terminal，但是这玩意用ssh的时候传文件不方便所以就想换个工具。其实一直有在用mobaXterm，但是这个免费版有session上限，而且我垂涎termius和tabby的ui很久了，就准备换一下。tabby这东西bug有点多，根本没法用公私钥连接我的服务器，应该是跟windows生成的密钥有关系，所以只好选择termius。&lt;/p&gt;

&lt;p&gt;termius的问题在于他现在打开就让你注册登录，实在是不想为了个ssh工具搞一个账号，于是准备破解一下。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/image-20250312164827250.png&quot; alt=&quot;image-20250312164827250&quot; /&gt;&lt;/p&gt;

&lt;p&gt;termius是基于electron的，之前并没有接触过，网上稍微翻了翻，先解个包：&lt;/p&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;npx&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;electron/asar&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extract&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;app.asar&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;解码出来后把原始的asar备份一下删除，这样electron应用会自动从app文件夹都读取代码加载，方便调试。&lt;/p&gt;

&lt;p&gt;调试有两种，一种是开remote debug，在命令行中启动electron应用，加上参数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--remote-debugging-port=xxxx&lt;/code&gt;就打开了远程调试端口，然后在chrome &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chrome://inspect/&lt;/code&gt;页面就可以附加上去。&lt;/p&gt;

&lt;p&gt;另外一种是修改代码开启控制台，electron中要打开控制台要使用BrowserWindow来开启&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;BrowserWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;webContents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;openDevTools&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;于是全局搜&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BrowserWindow(&lt;/code&gt;来找到创建窗口的代码，定位到这里：&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;        &lt;span class=&quot;nx&quot;&gt;yt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;linux&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;icon&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;yt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;macOS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;titleBarStyle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;customButtonsOnHover&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;primary&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;trafficLightPosition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;primary&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;vibrancy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;hud&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;backgroundColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;#00000000&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;visualEffectState&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;active&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))),&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;browserWindow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;BrowserWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;PE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;enable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;browserWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;webContents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// 添加：this.browserWindow.webContents.openDevTools(),&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;browserWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;browserWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;page-title-updated&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;preventDefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;browserWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;webContents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setWindowOpenHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;至此可以开启窗口进行调试。&lt;/p&gt;

&lt;p&gt;在调试Termius的过程中遇到了断点触发后就crash的问题，我也没搞清除是有反调试机制还是怎么回事，研究了半天调试最后其实没怎么用上，最后还是通过搜字符串定位的关键代码。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/image-20250312133351683.png&quot; alt=&quot;image-20250312133351683&quot; /&gt;&lt;/p&gt;

&lt;p&gt;搜索界面上的字符串定位到文件reconnectSaga&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/image-20250312133406053.png&quot; alt=&quot;image-20250312133406053&quot; /&gt;&lt;/p&gt;

&lt;p&gt;压缩的js很大，需要先格式化一下，vscode默认的格式化不行，全选代码用命令 Format Selection With 选择Prettier进行格式化。&lt;/p&gt;

&lt;p&gt;然后就是慢慢分析代码了，我对electron整个技术只有基本的了解，对vue以及js稍微懂一点，大概分析下来，这个文件每个function基本都是一个窗口，然后根据状态机去显示某个窗口，我们要做的就是找到termius最开始显示初次使用的窗口的位置然后进行patch，详细分析的过程很复杂，还要结合调试来判断代码功能。&lt;/p&gt;

&lt;p&gt;最终追踪到了这么个函数：&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PGt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;IGt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SGt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;wte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;eM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;userJustSawSuggestionToTryPremium&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;continue-without-account&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Wn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;wEe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;通过符号也能判断这里最后&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yield* Wn(wEe())&lt;/code&gt;的逻辑是不需要账户就继续使用的，于是我们进行patch。&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PGt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// const n = IGt(SGt),&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//     r = yield* wte(n, { from: e }, void 0, t);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// eM.userJustSawSuggestionToTryPremium(),&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// r === &quot;continue-without-account&quot; &amp;amp;&amp;amp; (yield* Wn(wEe()));&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Wn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;wEe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;成功进入主界面：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/image-20250312134547498.png&quot; alt=&quot;image-20250312134547498&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="re" /><summary type="html">因为windows上一直用的win terminal，但是这玩意用ssh的时候传文件不方便所以就想换个工具。其实一直有在用mobaXterm，但是这个免费版有session上限，而且我垂涎termius和tabby的ui很久了，就准备换一下。tabby这东西bug有点多，根本没法用公私钥连接我的服务器，应该是跟windows生成的密钥有关系，所以只好选择termius。 termius的问题在于他现在打开就让你注册登录，实在是不想为了个ssh工具搞一个账号，于是准备破解一下。 termius是基于electron的，之前并没有接触过，网上稍微翻了翻，先解个包： npx @electron/asar extract app.asar app 解码出来后把原始的asar备份一下删除，这样electron应用会自动从app文件夹都读取代码加载，方便调试。 调试有两种，一种是开remote debug，在命令行中启动electron应用，加上参数--remote-debugging-port=xxxx就打开了远程调试端口，然后在chrome chrome://inspect/页面就可以附加上去。 另外一种是修改代码开启控制台，electron中要打开控制台要使用BrowserWindow来开启 BrowserWindow().webContents.openDevTools() 于是全局搜BrowserWindow(来找到创建窗口的代码，定位到这里： yt.linux() &amp;amp;&amp;amp; (p.icon = Ch), yt.macOS() &amp;amp;&amp;amp; ((p.titleBarStyle = &quot;customButtonsOnHover&quot;), this.type === &quot;primary&quot; &amp;amp;&amp;amp; (p.trafficLightPosition = { x: 9, y: 17 }), this.type === &quot;primary&quot; &amp;amp;&amp;amp; ((p.show = !1), (p.vibrancy = &quot;hud&quot;), (p.backgroundColor = &quot;#00000000&quot;), (p.visualEffectState = &quot;active&quot;))), (this.browserWindow = new q.BrowserWindow(p)), PE.enable(this.browserWindow.webContents), // 添加：this.browserWindow.webContents.openDevTools(), (this.id = this.browserWindow.id), this.browserWindow.on(&quot;page-title-updated&quot;, (v) =&amp;gt; v.preventDefault() ), this.browserWindow.webContents.setWindowOpenHandler( 至此可以开启窗口进行调试。 在调试Termius的过程中遇到了断点触发后就crash的问题，我也没搞清除是有反调试机制还是怎么回事，研究了半天调试最后其实没怎么用上，最后还是通过搜字符串定位的关键代码。 搜索界面上的字符串定位到文件reconnectSaga 压缩的js很大，需要先格式化一下，vscode默认的格式化不行，全选代码用命令 Format Selection With 选择Prettier进行格式化。 然后就是慢慢分析代码了，我对electron整个技术只有基本的了解，对vue以及js稍微懂一点，大概分析下来，这个文件每个function基本都是一个窗口，然后根据状态机去显示某个窗口，我们要做的就是找到termius最开始显示初次使用的窗口的位置然后进行patch，详细分析的过程很复杂，还要结合调试来判断代码功能。 最终追踪到了这么个函数： function* PGt(e, t) { const n = IGt(SGt), r = yield* wte(n, { from: e }, void 0, t); eM.userJustSawSuggestionToTryPremium(), r === &quot;continue-without-account&quot; &amp;amp;&amp;amp; (yield* Wn(wEe())); } 通过符号也能判断这里最后yield* Wn(wEe())的逻辑是不需要账户就继续使用的，于是我们进行patch。 function* PGt(e, t) { // const n = IGt(SGt), // r = yield* wte(n, { from: e }, void 0, t); // eM.userJustSawSuggestionToTryPremium(), // r === &quot;continue-without-account&quot; &amp;amp;&amp;amp; (yield* Wn(wEe())); yield* Wn(wEe()); } 成功进入主界面：</summary></entry><entry><title type="html">Hook Windows 程序的类成员函数</title><link href="https://citrusice.github.io/posts/hooking-class-method-in-windows-program/" rel="alternate" type="text/html" title="Hook Windows 程序的类成员函数" /><published>2024-09-22T10:55:46+08:00</published><updated>2024-09-22T10:55:46+08:00</updated><id>https://citrusice.github.io/posts/hooking-class-method-in-windows-program</id><content type="html" xml:base="https://citrusice.github.io/posts/hooking-class-method-in-windows-program/">&lt;p&gt;对于 inline hook 这种技术我相信大家早已耳熟能详，我们往往使用 detours 或者 minhook 等框架来对函数进行挂钩。然而，hook 类成员函数却并不那么容易。&lt;/p&gt;

&lt;p&gt;假设有这么个类：&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ClassA&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;funcA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们的目标是对 funcA 进行 hook。&lt;/p&gt;

&lt;p&gt;遇到的第一个问题就是我们很难获取目标函数的地址。像 hook 框架如 minhook，都需要我们传入一个函数目标地址，这个地址类型是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;void*&lt;/code&gt; 类型的:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;MH_STATUS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WINAPI&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MH_CreateHook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LPVOID&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pTarget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LPVOID&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pDetour&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LPVOID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ppOriginal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;但是当我们想直接对 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ClassA::funcA&lt;/code&gt; 取地址的时候就会遇到报错：&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//invalid type conversionC/C++(171)&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;funcAPtr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ClassA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;funcA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//invalid type conversionC/C++(171)&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;funcAPtr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;reinterpret_cast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ClassA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;funcA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;那么难道对于类成员函数，就不能有一个指向类成员函数的指针吗？不是的，只是它必须是指向该类成员函数的函数指针，也就是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;void(ClassA::*)()&lt;/code&gt;，用代码来说就是你必须得这样：&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ClassA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PFN_FUNC_A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;PFN_FUNC_A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;funcAPtr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ClassA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;funcA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;但这仍然不解决我们的问题，我们需要的是一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;void*&lt;/code&gt; 类型的指针而不是指向成员函数的指针，但 cpp 标准中这两者之间恰恰无法相互转换。幸好，msvc 有一个比较 hack 的方法来解决这个问题：&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ClassA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;funcA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;funcAPtr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这实际上是未定行为但是它刚好解决了我们的问题，现在我们有了指向这个类成员函数的地址。&lt;/p&gt;

&lt;p&gt;另外在看了 StackOverflow 的回答后我看到了另外一种更优雅的办法，适用于任何编译器：&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;PFN_FUNC_A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;funcAMethodPtr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;funcAPtr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;autoPtr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ClassA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;funcA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;funcAPtr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;autoPtr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;funcAPtr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ClassA::funcA:0x%p&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;funcAPtr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;因为我们知道指针长度是相等的，通过 union 结构我们可以轻松的做数据类型转换。&lt;/p&gt;

&lt;p&gt;现在还需要编写 stub 函数。由于成员函数的调用预定是 thiscall，但是正常来说你不能直接这样&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__thiscall&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;stub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在 x64 情况下所有调用约定都是直接 rcx/rdx/r8/r9 这么顺序传参，并且由调用者创建栈帧，因此我们可以直接编写 stub 函数&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;stub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;而在 x86 下，cdecl 方式全部通过栈传递参数，而 thiscall 却需要通过 ecx 传递，所以没办法直接用 cdecl 函数来做 stub。那么有哪些其他的方式呢？最简单的就是再创建一个 class，在新 class 中定义一个相同的参数的函数来作为 stub，例如：&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StubClassA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stubFuncA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样的方式又有点麻烦，毕竟光是获取这个 stubFuncA 的地址就需要一番操作。幸好我们还有其他选择，那就是 fastcall。&lt;/p&gt;

&lt;p&gt;fastcall 通过 ecx/edx 传递前两个参数，并且与 thiscall 一样都是由被调用者平栈，因此通过 fastcall 我们就能获取到 this 指针了，我们可以这样写：&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__fastcall&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;stubFuncA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;edx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.....);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样我们便可以通过 stub 函数来接收参数。&lt;/p&gt;

&lt;p&gt;最后一个问题，在 stub 中我们还需要调用原始被 hook 的函数，如何通过成员函数指针来调用成员函数呢？&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ClassA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PFN_FUNC_A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;PFN_FUNC_A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;originalFuncA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__fastcall&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hookFuncA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ClassA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thisPtr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thisPtr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;originalFuncA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)();&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// or&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thisPtr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;originalFuncA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;至此，类成员函数的hook就可以实现了。&lt;/p&gt;

&lt;p&gt;文章中出现的代码：&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;iostream&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ClassA&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;funcA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StubClassA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stubFuncA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ClassA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PFN_FUNC_A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;PFN_FUNC_A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;originalFuncA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__fastcall&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hookFuncA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ClassA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thisPtr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thisPtr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;originalFuncA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)();&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// or&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thisPtr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;originalFuncA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ClassA&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;objA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;PFN_FUNC_A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;funcAMethodPtr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ClassA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;funcA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ClassA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;funcA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;funcAPtr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ClassA::funcA:0x%p&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;funcAPtr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;PFN_FUNC_A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;funcAMethodPtr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;funcAPtr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;autoPtr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ClassA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;funcA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;funcAPtr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;autoPtr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;funcAPtr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ClassA::funcA:0x%p&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;funcAPtr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;参考：&lt;/p&gt;

&lt;p&gt;https://isocpp.org/wiki/faq/pointers-to-members&lt;/p&gt;

&lt;p&gt;https://stackoverflow.com/questions/8121320/get-memory-address-of-member-function&lt;/p&gt;</content><author><name></name></author><category term="hook" /><category term="windows" /><summary type="html">对于 inline hook 这种技术我相信大家早已耳熟能详，我们往往使用 detours 或者 minhook 等框架来对函数进行挂钩。然而，hook 类成员函数却并不那么容易。</summary></entry><entry><title type="html">nop word ptr ds:[rax+rax*1], ax 到底是什么东西</title><link href="https://citrusice.github.io/posts/what-exactly-is-multi-bytes-nop/" rel="alternate" type="text/html" title="nop word ptr ds:[rax+rax*1], ax 到底是什么东西" /><published>2024-08-10T13:35:55+08:00</published><updated>2024-08-10T13:35:55+08:00</updated><id>https://citrusice.github.io/posts/what-exactly-is-multi-bytes-nop</id><content type="html" xml:base="https://citrusice.github.io/posts/what-exactly-is-multi-bytes-nop/">&lt;p&gt;在逆向的时候我们经常会看到如下指令：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-asm&quot;&gt;nop                                       
nop dword ptr [eax]                        
nop dword ptr [eax + 00h]                  
nop dword ptr [eax + eax*1 + 00h]            
nop dword ptr [eax + 00000000h]            
nop dword ptr [eax + eax*1 + 00000000h]  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;虽然我们都知道他们没什么用，但是我们不知道的是为什么会出现这些指令。&lt;/p&gt;

&lt;p&gt;理论上我们只需要一个nop就足以，但是为什么有这么多多字节组成的nop呢？&lt;/p&gt;

&lt;p&gt;搜索一番我有了答案：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;用于解决旧芯片的bug (https://devblogs.microsoft.com/oldnewthing/20110112-00/?p=11773)&lt;/li&gt;
  &lt;li&gt;用于指令对齐或者其他优化&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;多字节的nop在优化中用于将它之后的指令对齐到16字节，因为cpu抓取指令通常以16字节为一个单元，这样如果下一个指令是一个会被多次执行的指令（如循环最开始的一个指令）,那么将不用再次抓取下一个16字节而能够直接解码。这块我不太懂但我觉得似乎有点道理。另外intel在手册中也有提到：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;3.4.1.5 - Assembly/Compiler Coding Rule 12. (M impact, H generality)&lt;/em&gt;
All branch targets should be 16-byte aligned.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;另外我在bfd库中发现了相关代码，显示这些多字节指令用于填充buffer&lt;/p&gt;

&lt;p&gt;https://android.googlesource.com/toolchain/binutils/+/f226517827d64cc8f9dccb0952731601ac13ef2a/binutils-2.23/bfd/cpu-i386.c#51&lt;/p&gt;

&lt;p&gt;另外，多个单字节nop相比于一个多字节nop所画的的cpu时间更长，这也是一个原因&lt;/p&gt;

&lt;p&gt;参考：&lt;/p&gt;

&lt;p&gt;https://devblogs.microsoft.com/oldnewthing/20110112-00/?p=11773&lt;/p&gt;

&lt;p&gt;https://stackoverflow.com/questions/43991155/what-does-nop-dword-ptr-raxrax-x64-assembly-instruction-do&lt;/p&gt;

&lt;p&gt;https://softwareengineering.stackexchange.com/questions/158624/are-some-nop-codes-treated-differently-than-others&lt;/p&gt;

&lt;p&gt;https://android.googlesource.com/toolchain/binutils/+/f226517827d64cc8f9dccb0952731601ac13ef2a/binutils-2.23/bfd/cpu-i386.c#51&lt;/p&gt;

&lt;p&gt;https://stackoverflow.com/questions/27714524/x86-multi-byte-nop-and-instruction-prefix&lt;/p&gt;

&lt;p&gt;https://news.ycombinator.com/item?id=12369414&lt;/p&gt;

&lt;p&gt;https://stackoverflow.com/questions/18113995/performance-optimisations-of-x86-64-assembly-alignment-and-branch-prediction/18279617#18279617&lt;/p&gt;</content><author><name></name></author><category term="cpu" /><summary type="html">在逆向的时候我们经常会看到如下指令：</summary></entry><entry><title type="html">git运行很慢的解决方法</title><link href="https://citrusice.github.io/posts/git-running-slow-solution/" rel="alternate" type="text/html" title="git运行很慢的解决方法" /><published>2024-06-18T15:49:05+08:00</published><updated>2024-06-18T15:49:05+08:00</updated><id>https://citrusice.github.io/posts/git-running-slow-solution</id><content type="html" xml:base="https://citrusice.github.io/posts/git-running-slow-solution/">&lt;p&gt;最近发现 git 总是很慢，操作起来卡的不行，于是准备解决一下。网上搜索了一下相关信息再加上跟朋友讨论得出大概两点原因：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;显卡驱动兼容&lt;/strong&gt;：我不懂绘制之类的事情，只是搜到了几个讨论这个 issue。不过我本人在设置了默认用集显后情况确实好了不少。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;参考链接：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/42888024/git-bash-mintty-is-extremely-slow-on-windows-10-os&quot;&gt;Git Bash (mintty) is extremely slow on Windows 10 OS - Stack Overflow&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/git-for-windows/git/issues/1129&quot;&gt;git commands running slow as hell · Issue #1129 · git-for-windows/git&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/git-for-windows/git/issues/1070&quot;&gt;Git commands have a 2-3 second delay before returning to the prompt · Issue #1070 · git-for-windows/git&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;杀软原因&lt;/strong&gt;：这点解释得挺有道理。Linux 上有 fork 这个功能，是很多程序会&lt;strong&gt;大量&lt;/strong&gt;调用的。但是Windows 上没有，为了兼容，在 windows 上都是使用 windows api 来模拟的，本身性能不够好。同时，而很多杀毒软件会在创建进程时对进程进行扫描并注入 DLL 监控行为，这就更卡了。除了卸载杀软之外，还可以使用 Windows 11 的新功能 Dev Driver 来禁用过滤驱动。&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="杂" /><summary type="html">最近发现 git 总是很慢，操作起来卡的不行，于是准备解决一下。网上搜索了一下相关信息再加上跟朋友讨论得出大概两点原因：</summary></entry><entry><title type="html">记一次给自己应急</title><link href="https://citrusice.github.io/posts/respond-to-a-hack-for-myself/" rel="alternate" type="text/html" title="记一次给自己应急" /><published>2024-04-12T18:19:58+08:00</published><updated>2024-04-12T18:19:58+08:00</updated><id>https://citrusice.github.io/posts/respond-to-a-hack-for-myself</id><content type="html" xml:base="https://citrusice.github.io/posts/respond-to-a-hack-for-myself/">&lt;p&gt;很久没分析样本了，这次朋友发了个样本过来我看很有意思就想分析一下。但是终究是太自信，也是嫌麻烦，都没有把样本扔虚拟机分析，本机打开 ida 就开始逆向了。然后不出意外的我就手抖不小心把样本跑了起来，于是就有了这篇文章。&lt;/p&gt;

&lt;p&gt;样本是一个带签名的 exe，附带了一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.dat&lt;/code&gt; 文件，这是最开始吸引我的地方。因为众所周知，一般白加黑都是一个签名 exe 带个黑 dll，而这样本只有个 dat 文件，所以肯定有点意思。经过一通逆向后在样本里找到了很多 lua 相关的字符串，我大概猜到这个白加黑是靠 lua 脚本实现的白加黑了。网上搜了一下这个样本的信息同样确认了这个样本是从 dat 文件提取 lua 脚本执行的，作者会在 lua 脚本中插入执行shellcode 的代码，而这个 dat 文件是一个加密的压缩包。&lt;/p&gt;

&lt;p&gt;知道了大概流程就简单了，直接在相关内存加载相关代码下断 dump 下来 shellcode 做分析。从 dump 出的 shellcode 中翻了一下找到了 mz 头，那么估计就是个内存加载 pe 的代码了：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Pasted_image_20240412173558.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;不过为了安全起见我还是用调试器跟了一遍，确定就是内存加载的代码，然后直接提取出来被内存加载的 pe 分析&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HANDLE sub_10001120()
{
  HANDLE result; // eax
  HANDLE v1; // eax
  DWORD (__stdcall *lpStartAddress)(LPVOID); // [esp+Ch] [ebp-224h]
  WCHAR String1[262]; // [esp+10h] [ebp-220h] BYREF
  LPVOID lpBuffer; // [esp+21Ch] [ebp-14h]
  DWORD NumberOfBytesRead; // [esp+220h] [ebp-10h] BYREF
  HANDLE hFile; // [esp+224h] [ebp-Ch]
  BOOL v7; // [esp+228h] [ebp-8h]
  SIZE_T dwSize; // [esp+22Ch] [ebp-4h]

  lstrcpyW(String1, L&quot;C:\\ProgramData\\templateWatch.dat&quot;);
  result = CreateFileW(String1, 0x80000000, 0, 0, 3u, 0x80u, 0);
  hFile = result;
  if ( result )
  {
    dwSize = GetFileSize(hFile, 0);
    if ( dwSize &amp;gt;= 0x200 &amp;amp;&amp;amp; (lpBuffer = VirtualAlloc(0, dwSize, 0x3000u, 0x40u)) != 0 )
    {
      NumberOfBytesRead = 0;
      v7 = ReadFile(hFile, lpBuffer, dwSize, &amp;amp;NumberOfBytesRead, 0);
      if ( hFile )
      {
        CloseHandle(hFile);
        hFile = 0;
      }
      if ( v7 )
      {
        if ( NumberOfBytesRead == dwSize )
        {
          lpStartAddress = (DWORD (__stdcall *)(LPVOID))((char *)lpBuffer + 256);
          if ( sub_10001020((BYTE *)lpBuffer + 256, dwSize - 256, (BYTE *)lpBuffer, 0x100u) )
          {
            CreateThread(0, 0, lpStartAddress, 0, 0, 0);
            v1 = GetCurrentProcess();
            WaitForSingleObject(v1, 0xFFFFFFFF);
          }
        }
      }
      if ( hFile )
        CloseHandle(hFile);
      result = (HANDLE)VirtualFree(lpBuffer, 0, 0x8000u);
    }
    else
    {
      result = (HANDLE)CloseHandle(hFile);
    }
  }
  return result;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;一览无余的从文件读取 shellcode 然后再加载，然后检查了下本人电脑的这个路径，发现并没有这个文件，safe 了。再问了下朋友确认这个只是整个样本的一部分，应该只是用来维持权限的，安装后门的代码在另外的位置，虚惊一场！&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;我是太想搞安全了，但是没时间，而且区块链这边搞的也不是很顺利。不过看来二进制这块我还没有太生疏，逆完这样本说实话还挺开心的，感觉自己宝刀未老啊。&lt;/p&gt;</content><author><name></name></author><category term="reverse-engineering" /><summary type="html">很久没分析样本了，这次朋友发了个样本过来我看很有意思就想分析一下。但是终究是太自信，也是嫌麻烦，都没有把样本扔虚拟机分析，本机打开 ida 就开始逆向了。然后不出意外的我就手抖不小心把样本跑了起来，于是就有了这篇文章。</summary></entry><entry><title type="html">五年总结</title><link href="https://citrusice.github.io/posts/five-years-summary/" rel="alternate" type="text/html" title="五年总结" /><published>2024-01-22T10:48:25+08:00</published><updated>2024-01-22T10:48:25+08:00</updated><id>https://citrusice.github.io/posts/five-years-summary</id><content type="html" xml:base="https://citrusice.github.io/posts/five-years-summary/">&lt;p&gt;搞安全五年了，一直想着在五年结束后写一个五年总结，但是我的安全路却在第五年暂时中止了，虽然说区块链也有区块链安全，但我搞的东西跟安全没啥关系，所以并没有五年，就算个4.5年吧。&lt;/p&gt;

&lt;p&gt;其实本来第三年的时候就想写个总结了，但是第三年的时候感觉自己也没有太多东西，而且那时候好像也把写总结这事忘了，转眼已经到了第四年下半年。等到第四年结束的时候想起来，又觉得第四年这数字不上不下的，干脆第五年再写吧，却没想到第五年是这般模样。&lt;/p&gt;

&lt;p&gt;第一年搞安全基本都是在搞web相关的，渗透和ctf都搞搞，临近年末的时候还学了一下pwn，不过只有栈溢出水平。初学安全最多的感触是迷茫，我相信这是每个对黑客技术感兴趣的人在初学时都会感受到的。一方面来自于不知道怎么学，另一方面我也找不到真正学习黑客技术的圈子。如果现在有人问我怎么去成为一个黑客，或者怎么学习黑客技术，我能告诉他先需要学什么什么，去哪些论坛、加入哪些圈子等等。可是在我初学的时候，我能知道的就是去百度“黑客”这两个关键字，而搜到的都是一些垃圾内容，比如什么打着“红客”旗号招摇撞骗的团队，又或者是知乎上为了博眼球看起来好像很厉害的娱乐圈脚本小子。总之最初的一段时间确实很迷茫，但是慢慢认识了一些朋友，一起研究渗透，打ctf什么的，相当开心。但正如不知名普通人百顺所说——前进的道路上总是孤独的。当学习的知识愈发深入，会发现根本没人可以交流，只有网上撩撩几段文字作伴，甚至没有文档。不过这就是后话了。&lt;/p&gt;

&lt;p&gt;第二年接触到了免杀，因为有一次渗透的时候马被360干掉了。由此就开始学习windows编程、pe结构之类的东西，就想着写内存加载做个自动化免杀的东西（不过直到两年后我才知道真正想自动化免杀该怎么做）。之后的话到了一个做安全的公司实习，见识了一下真正红队干的事，还精进了一下逆向技能。&lt;/p&gt;

&lt;p&gt;第三年正式工作的时候才真正下定决心，专注搞二进制，不再想着搞什么渗透/javaweb之类的东西了。之后两年就是学习探索windows的各方面，当然还深入的研究了一些杀毒软件。&lt;/p&gt;

&lt;p&gt;最后一年就转去做区块链了，深入学了很多区块链的知识，但是目前仍然是前途无亮，希望今年能有好转吧。而且长期的打算我还是要做安全的。&lt;/p&gt;

&lt;p&gt;回顾一下这几年，花时间做大量逆向是对我有最多提升的部分，这里逆向的目标主要是一些 windows 系统组件，或者一些软件/驱动的内部实现。另外一方面的提升来自于写一些中小型的项目，搞安全的人多是写一些小脚本，代码能力还是偏弱的，写一些中小型的项目提升了我很多代码能力。学安全这几年最遗憾的是没有真正去挖漏洞，虽然之前做过一些漏洞研究，但仍然跟漏洞无缘。我觉得挖漏洞对于我来说就像个徽章吧，证明我是个黑客，这种感觉，所以之后还是一定要挖一个出来。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;半年没写文章了，新工作挺忙，就算想写点什么也没有精力去研究。对于工作还是应该构建一个安全边界，留一点自己的时间，但是这块我做的不好。今年也做了些管理的工作，感觉我不适合当管理。还是想专心搞搞技术。幸运的是我还有时间，还有试错的资本。有点权力固然是好事，但是权力也会带带种种不好的东西。感觉能专心搞技术是种幸福，写到这里不由得又怀念起上家公司了。&lt;/p&gt;</content><author><name></name></author><category term="杂" /><summary type="html">搞安全五年了，一直想着在五年结束后写一个五年总结，但是我的安全路却在第五年暂时中止了，虽然说区块链也有区块链安全，但我搞的东西跟安全没啥关系，所以并没有五年，就算个4.5年吧。 其实本来第三年的时候就想写个总结了，但是第三年的时候感觉自己也没有太多东西，而且那时候好像也把写总结这事忘了，转眼已经到了第四年下半年。等到第四年结束的时候想起来，又觉得第四年这数字不上不下的，干脆第五年再写吧，却没想到第五年是这般模样。 第一年搞安全基本都是在搞web相关的，渗透和ctf都搞搞，临近年末的时候还学了一下pwn，不过只有栈溢出水平。初学安全最多的感触是迷茫，我相信这是每个对黑客技术感兴趣的人在初学时都会感受到的。一方面来自于不知道怎么学，另一方面我也找不到真正学习黑客技术的圈子。如果现在有人问我怎么去成为一个黑客，或者怎么学习黑客技术，我能告诉他先需要学什么什么，去哪些论坛、加入哪些圈子等等。可是在我初学的时候，我能知道的就是去百度“黑客”这两个关键字，而搜到的都是一些垃圾内容，比如什么打着“红客”旗号招摇撞骗的团队，又或者是知乎上为了博眼球看起来好像很厉害的娱乐圈脚本小子。总之最初的一段时间确实很迷茫，但是慢慢认识了一些朋友，一起研究渗透，打ctf什么的，相当开心。但正如不知名普通人百顺所说——前进的道路上总是孤独的。当学习的知识愈发深入，会发现根本没人可以交流，只有网上撩撩几段文字作伴，甚至没有文档。不过这就是后话了。</summary></entry><entry><title type="html">From Memory Loading to Everything - Part 2</title><link href="https://citrusice.github.io/posts/from-memory-loading-to-everything-part-2/" rel="alternate" type="text/html" title="From Memory Loading to Everything - Part 2" /><published>2023-08-29T10:20:56+08:00</published><updated>2023-08-29T10:20:56+08:00</updated><id>https://citrusice.github.io/posts/from-memory-loading-to-everything-part-2</id><content type="html" xml:base="https://citrusice.github.io/posts/from-memory-loading-to-everything-part-2/">&lt;p&gt;上一篇文章中我介绍了 tls 表以及 ldr，本文将介绍资源表、LdrpHashTable、异常表和 MFC 程序加载时出现的问题等相关内容。&lt;/p&gt;

&lt;h1 id=&quot;resource-table&quot;&gt;Resource Table&lt;/h1&gt;

&lt;p&gt;pe 的资源表用于存放资源文件，我们 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FindResourceA&lt;/code&gt; 与 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LoadResource&lt;/code&gt; 来从资源表中获取资源。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FindResourceA&lt;/code&gt; 是依赖 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BasepMapModuleHandle&lt;/code&gt; 获取到 image 的句柄（基址）的，当我们传入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NULL&lt;/code&gt; 时，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BasepMapModuleHandle&lt;/code&gt; 将取 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NtCurrentPeb()-&amp;gt;ImageBaseAddress&lt;/code&gt; 作为返回结果&lt;/p&gt;

&lt;h1 id=&quot;ldrphashtable&quot;&gt;LdrpHashTable&lt;/h1&gt;

&lt;p&gt;编程中往往会用到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GetModuleHandle&lt;/code&gt; 找到模块的基址，这跟 LdrpHashTable 有关。&lt;/p&gt;

&lt;p&gt;LdrpHashTable 是一个存放模块列表的 hash 表，而 GetModuleHandle 就是通过这个表进行模块的查询&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;LIST_ENTRY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LdrpHashTable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LDRP_HASH_TABLE_SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;LdrDataTableEntry-&amp;gt;HashLink 这个 hashlink 就与一个 listentry 相连接，因此可以通过找到一个模块的 ldrentry 间接找到这个整个 LdrpHashTable。&lt;/p&gt;

&lt;h1 id=&quot;exception-table&quot;&gt;Exception Table&lt;/h1&gt;

&lt;p&gt;x64 的异常与 x86 不同，不再依赖异常链表，而是将异常相关信息写在 pe 的 exception table 中，在 pe 装载后对 exception table 调用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RtlAddFunctionTable&lt;/code&gt; 注册异常。&lt;/p&gt;

&lt;h1 id=&quot;mfc-程序&quot;&gt;MFC 程序&lt;/h1&gt;

&lt;p&gt;尝试加载一下 mfc 程序，发现失败了。研究了一下发现是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GetModuldeFileName&lt;/code&gt; 的问题。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GetModuldeFileName&lt;/code&gt; 根据传入的 handle 在 InMemoryOrderLinks 链表中寻找对应的 ldr entry，然后返回 entry 中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FullDllName&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;对于内存加载的模块我没有添加对应的 ldr entry，因此导致 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GetModuldeFileName&lt;/code&gt; 失败。而如果要添加 ldr entry，由于各个 windows 版本中的 ldr entry 结构并不一样，如何处理以保证兼容性也是一个问题。&lt;/p&gt;

&lt;p&gt;报错的位置：&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;v6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GetModuleFileNameW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_hInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x104u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;260&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AfxAssertFailedLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;D:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;agent&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;_work&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;vctools&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;VC7Libs&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Ship&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ATLMFC&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Src&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;MFC&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;appinit.cpp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;75&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;__debugbreak&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0:000&amp;gt; k
 # Child-SP          RetAddr               Call Site
00 000000ed`ba2f7958 00007ffd`37294d13     ntdll!RtlPcToFileHeader
01 000000ed`ba2f7960 00000001`40b14d8f     KERNELBASE!GetModuleHandleExW+0x83
02 000000ed`ba2f79a0 00000001`40b17233     encrytStringTool!common_message_window&amp;lt;char&amp;gt;+0x6f [minkernel\crts\ucrt\src\appcrt\misc\dbgrpt.cpp @ 333] 
03 000000ed`ba2f9c30 00000001`40b518dc     encrytStringTool!__acrt_MessageWindowA+0x43 [minkernel\crts\ucrt\src\appcrt\misc\dbgrpt.cpp @ 453] 
04 000000ed`ba2f9c70 00000001`40b170b0     encrytStringTool!_VCrtDbgReportA+0x99c [minkernel\crts\ucrt\src\appcrt\misc\dbgrptt.cpp @ 420] 
05 000000ed`ba2fed60 00000001`404352b4     encrytStringTool!_CrtDbgReport+0x60 [minkernel\crts\ucrt\src\appcrt\misc\dbgrpt.cpp @ 263] 
06 000000ed`ba2fedc0 00000001`40493f70     encrytStringTool!AfxAssertFailedLine+0x94 [C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\atlmfc\include\afx.h @ 317] 
07 000000ed`ba2fef60 00000001`40493e03     encrytStringTool!CWinApp::SetCurrentHandles+0x110 [D:\agent\_work\13\s\src\vctools\VC7Libs\Ship\ATLMFC\Src\MFC\appinit.cpp @ 75] 
08 000000ed`ba2ff860 00000001`40baba30     encrytStringTool!AfxWinInit+0xc3 [D:\agent\_work\13\s\src\vctools\VC7Libs\Ship\ATLMFC\Src\MFC\appinit.cpp @ 46] 
09 000000ed`ba2ff8a0 00000001`40bab992     encrytStringTool!AfxWinMain+0x80 [D:\agent\_work\13\s\src\vctools\VC7Libs\Ship\ATLMFC\Src\MFC\winmain.cpp @ 29] 
0a 000000ed`ba2ff960 00000001`40aadd72     encrytStringTool!wWinMain+0x32 [D:\agent\_work\13\s\src\vctools\VC7Libs\Ship\ATLMFC\Src\MFC\appmodul.cpp @ 26] 
0b 000000ed`ba2ff990 00000001`40aadc1e     encrytStringTool!invoke_main+0x32 [D:\agent\_work\13\s\src\vctools\crt\vcstartup\src\startup\exe_common.inl @ 123] 
0c 000000ed`ba2ff9d0 00000001`40aadade     encrytStringTool!__scrt_common_main_seh+0x12e [D:\agent\_work\13\s\src\vctools\crt\vcstartup\src\startup\exe_common.inl @ 288] 
0d 000000ed`ba2ffa40 00000001`40aade0e     encrytStringTool!__scrt_common_main+0xe [D:\agent\_work\13\s\src\vctools\crt\vcstartup\src\startup\exe_common.inl @ 331] 
*** WARNING: Unable to verify checksum for test.exe
0e 000000ed`ba2ffa70 00007ff7`99381ed2     encrytStringTool!wWinMainCRTStartup+0xe [D:\agent\_work\13\s\src\vctools\crt\vcstartup\src\startup\exe_wwinmain.cpp @ 17] 
0f 000000ed`ba2ffaa0 00007ff7`9938256f     test!CallEntry+0xb2 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;深入这个函数，GetModuleFileNameW-&amp;gt;LdrGetDllFullName-&amp;gt;LdrpFindLoadedDllByHandle
最终通过 LdrpModuleBaseAddressIndex 这个东西找到 dllentry。&lt;/p&gt;

&lt;p&gt;继续研究，通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LdrpModuleBaseAddressIndex&lt;/code&gt; 的引用找到了函数 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LdrpInsertModuleToIndexLockHeld&lt;/code&gt; ，这个函数处理了 LdrpMappingInfoIndex 和 LdrpModuleBaseAddressIndex，可见这两个东西都是我们需要处理的。&lt;/p&gt;

&lt;p&gt;那么这两个东西到底是个什么结构？在一些逆向以及查找资料后，得知这个东西是个红黑树&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;RtlRbInsertNodeEx((unsigned __int64 *)&amp;amp;LdrpMappingInfoIndex, v7, v8, (unsigned __int64)&amp;amp;a1-&amp;gt;MappingInfoIndexNode);
 result = RtlRbInsertNodeEx(
             (unsigned __int64 *)&amp;amp;LdrpModuleBaseAddressIndex,
             v10,
             v4,
             (unsigned __int64)&amp;amp;a1-&amp;gt;BaseAddressIndexNode);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;_RTL_BALANCED_NODE&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;union&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;_RTL_BALANCED_NODE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;_RTL_BALANCED_NODE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;_RTL_BALANCED_NODE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;union&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;UCHAR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Red&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;UCHAR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Balance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ULONG_PTR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ParentValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RTL_BALANCED_NODE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PRTL_BALANCED_NODE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;_RTL_RB_TREE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;PRTL_BALANCED_NODE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;PRTL_BALANCED_NODE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RTL_RB_TREE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PRTL_RB_TREE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;搞清楚了这两个东西是个红黑树，那么还需要知道这两个结构存的是什么内容的数据，继续逆向，得知 ldr data table entry 的 MappingInfoIndexNode 对应的 LdrpMappingInfoIndex，BaseAddressIndexNode 对应 LdrpModuleBaseAddressIndex。&lt;/p&gt;

&lt;p&gt;红黑树的节点是可以通过 ParentValue 找到父节点的，因此定位到一棵树的 root 是可以做到，只要能找到任意一个节点就可以追寻到 root。定位到 root 以后直接调用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RtlRbInsertNodeEx&lt;/code&gt; 即可。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;断断续续总算是把这篇文章弄完了。由于实在是没有精力，脑子里根本构建不出整个文章的思路，所以写得很散，只是潜意识觉得文章应该有什么就把该有的堆上去，还请见谅。&lt;/p&gt;

&lt;p&gt;搞区块链以后常常会后悔，因为自己抛弃了一个安逸的环境。虽然这些后悔是我早已预料的，但是我还是高估了我对变化的环境的承受能力，我往往感到精疲力尽，并在想如果我当时没有做出这样的选择，我应该沉浸在 ida 和 windows 的世界里，享受轻松无压力的生活。尽管有一些言论是说“让自己走出舒适区”，但我却并不认同。只要这个舒适区是可持续的，那么一直待在里面没有什么不好。不过，虽然我嘴上是不认同这种观点，但是我实际的选择上却是倾向于认同的，也许是因为我还是想做一点事才这样选择。&lt;/p&gt;

&lt;p&gt;博客我还是会尽力写，因为一方面我不想说让我二进制这块的学习就这样停滞，另外我也仍然想在安全这块有所成就，不过写的速度是不会像以前那样一个月一篇了。不过也无所谓，贵在坚持。&lt;/p&gt;</content><author><name></name></author><category term="windows" /><summary type="html">上一篇文章中我介绍了 tls 表以及 ldr，本文将介绍资源表、LdrpHashTable、异常表和 MFC 程序加载时出现的问题等相关内容。</summary></entry><entry><title type="html">From Memory Loading to Everything - Part 1</title><link href="https://citrusice.github.io/posts/from-memory-loading-to-everyting-part-1/" rel="alternate" type="text/html" title="From Memory Loading to Everything - Part 1" /><published>2023-05-20T11:02:16+08:00</published><updated>2023-05-20T11:02:16+08:00</updated><id>https://citrusice.github.io/posts/from-memory-loading-to-everyting-part-1</id><content type="html" xml:base="https://citrusice.github.io/posts/from-memory-loading-to-everyting-part-1/">&lt;p&gt;我接触 Windows 最开始看的两本书是《PE 权威指南》和《Windows 核心编程》，学这两本书的目的也很简单：实现内存加载。我们知道，要实现内存加载，最重要的是处理 PE 中的三个表：导入表，iat 和重定位表。然而跟 pe 装载有关系的表却不仅仅只有这三个，那么剩下的表都有着怎样的内容？在 PE 的装在过程中发挥了什么样的作用？&lt;/p&gt;

&lt;p&gt;毫无疑问，仅仅处理导入表和重定位表的内存加载是不完美的，只能实现部分 pe 的加载。&lt;/p&gt;

&lt;p&gt;这个系列目的在于提供 pe 装载部分细节的&lt;strong&gt;索引&lt;/strong&gt;，希望读者能通过这些索引去更深入的学习，以实现完美的内存加载技术。当然，不会有现成的代码，甚至不会有太多细节。&lt;/p&gt;

&lt;p&gt;对 pe 这些表的了解过程一定程度上也代表了我的二进制学习历程。&lt;/p&gt;

&lt;h1 id=&quot;peb_ldr_data&quot;&gt;PEB_LDR_DATA&lt;/h1&gt;

&lt;p&gt;尽管 PEB_LDR_DATA 并非是 pe 中的一个表，但是它记录了当前进程中到底有哪些模块被装载，如果要实现完美的内存加载，它是少不了的，因为 GetModuleHandle 是依赖于 LdrpCheckForLoadedDll ，而 LdrpCheckForLoadedDll 最终就是检查 PEB_LDR_DATA。&lt;/p&gt;

&lt;p&gt;另外，如果要将内存加载的模块设置为主模块，需要修改 ` (HMODULE)(PVOID)NtCurrentPeb()-&amp;gt;ImageBaseAddress`&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//0x58 bytes (sizeof)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;_PEB_LDR_DATA&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                                           &lt;span class=&quot;c1&quot;&gt;//0x0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;UCHAR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Initialized&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                                      &lt;span class=&quot;c1&quot;&gt;//0x4&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;VOID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SsHandle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                                         &lt;span class=&quot;c1&quot;&gt;//0x8&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;_LIST_ENTRY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InLoadOrderModuleList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                               &lt;span class=&quot;c1&quot;&gt;//0x10&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;_LIST_ENTRY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InMemoryOrderModuleList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                             &lt;span class=&quot;c1&quot;&gt;//0x20&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;_LIST_ENTRY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InInitializationOrderModuleList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                     &lt;span class=&quot;c1&quot;&gt;//0x30&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;VOID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EntryInProgress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                                  &lt;span class=&quot;c1&quot;&gt;//0x40&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;UCHAR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ShutdownInProgress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                               &lt;span class=&quot;c1&quot;&gt;//0x48&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;VOID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ShutdownThreadId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                                 &lt;span class=&quot;c1&quot;&gt;//0x50&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt; 

&lt;span class=&quot;c1&quot;&gt;//0x120 bytes (sizeof)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;_LDR_DATA_TABLE_ENTRY&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;_LIST_ENTRY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InLoadOrderLinks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                    &lt;span class=&quot;c1&quot;&gt;//0x0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;_LIST_ENTRY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InMemoryOrderLinks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                  &lt;span class=&quot;c1&quot;&gt;//0x10&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;_LIST_ENTRY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InInitializationOrderLinks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                          &lt;span class=&quot;c1&quot;&gt;//0x20&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;VOID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DllBase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                                          &lt;span class=&quot;c1&quot;&gt;//0x30&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;VOID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EntryPoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                                       &lt;span class=&quot;c1&quot;&gt;//0x38&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SizeOfImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                                      &lt;span class=&quot;c1&quot;&gt;//0x40&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;_UNICODE_STRING&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FullDllName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                     &lt;span class=&quot;c1&quot;&gt;//0x48&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;_UNICODE_STRING&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BaseDllName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                     &lt;span class=&quot;c1&quot;&gt;//0x58&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;union&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;UCHAR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FlagGroup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;                                                 &lt;span class=&quot;c1&quot;&gt;//0x68&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                                        &lt;span class=&quot;c1&quot;&gt;//0x68&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PackagedBinary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                         &lt;span class=&quot;c1&quot;&gt;//0x68&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MarkedForRemoval&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                       &lt;span class=&quot;c1&quot;&gt;//0x68&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ImageDll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                               &lt;span class=&quot;c1&quot;&gt;//0x68&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoadNotificationsSent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                  &lt;span class=&quot;c1&quot;&gt;//0x68&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TelemetryEntryProcessed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                &lt;span class=&quot;c1&quot;&gt;//0x68&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ProcessStaticImport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                    &lt;span class=&quot;c1&quot;&gt;//0x68&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InLegacyLists&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                          &lt;span class=&quot;c1&quot;&gt;//0x68&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InIndexes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                              &lt;span class=&quot;c1&quot;&gt;//0x68&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ShimDll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                                &lt;span class=&quot;c1&quot;&gt;//0x68&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InExceptionTable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                       &lt;span class=&quot;c1&quot;&gt;//0x68&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReservedFlags1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                         &lt;span class=&quot;c1&quot;&gt;//0x68&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoadInProgress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                         &lt;span class=&quot;c1&quot;&gt;//0x68&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoadConfigProcessed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                    &lt;span class=&quot;c1&quot;&gt;//0x68&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EntryProcessed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                         &lt;span class=&quot;c1&quot;&gt;//0x68&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ProtectDelayLoad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                       &lt;span class=&quot;c1&quot;&gt;//0x68&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReservedFlags3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                         &lt;span class=&quot;c1&quot;&gt;//0x68&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DontCallForThreads&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                     &lt;span class=&quot;c1&quot;&gt;//0x68&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ProcessAttachCalled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                    &lt;span class=&quot;c1&quot;&gt;//0x68&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ProcessAttachFailed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                    &lt;span class=&quot;c1&quot;&gt;//0x68&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CorDeferredValidate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                    &lt;span class=&quot;c1&quot;&gt;//0x68&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CorImage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                               &lt;span class=&quot;c1&quot;&gt;//0x68&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DontRelocate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                           &lt;span class=&quot;c1&quot;&gt;//0x68&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CorILOnly&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                              &lt;span class=&quot;c1&quot;&gt;//0x68&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ChpeImage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                              &lt;span class=&quot;c1&quot;&gt;//0x68&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReservedFlags5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                         &lt;span class=&quot;c1&quot;&gt;//0x68&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Redirected&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                             &lt;span class=&quot;c1&quot;&gt;//0x68&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReservedFlags6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                         &lt;span class=&quot;c1&quot;&gt;//0x68&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CompatDatabaseProcessed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                &lt;span class=&quot;c1&quot;&gt;//0x68&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;USHORT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ObsoleteLoadCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                               &lt;span class=&quot;c1&quot;&gt;//0x6c&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;USHORT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TlsIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                                        &lt;span class=&quot;c1&quot;&gt;//0x6e&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;_LIST_ENTRY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashLinks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                           &lt;span class=&quot;c1&quot;&gt;//0x70&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TimeDateStamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                                    &lt;span class=&quot;c1&quot;&gt;//0x80&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;_ACTIVATION_CONTEXT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EntryPointActivationContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;//0x88&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;VOID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                                             &lt;span class=&quot;c1&quot;&gt;//0x90&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;_LDR_DDAG_NODE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DdagNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                        &lt;span class=&quot;c1&quot;&gt;//0x98&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;_LIST_ENTRY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NodeModuleLink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                      &lt;span class=&quot;c1&quot;&gt;//0xa0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;_LDRP_LOAD_CONTEXT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoadContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                 &lt;span class=&quot;c1&quot;&gt;//0xb0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;VOID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ParentDllBase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                                    &lt;span class=&quot;c1&quot;&gt;//0xb8&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;VOID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SwitchBackContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                                &lt;span class=&quot;c1&quot;&gt;//0xc0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;_RTL_BALANCED_NODE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BaseAddressIndexNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                         &lt;span class=&quot;c1&quot;&gt;//0xc8&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;_RTL_BALANCED_NODE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MappingInfoIndexNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                         &lt;span class=&quot;c1&quot;&gt;//0xe0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ULONGLONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OriginalBase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                                 &lt;span class=&quot;c1&quot;&gt;//0xf8&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_LARGE_INTEGER&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoadTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                          &lt;span class=&quot;c1&quot;&gt;//0x100&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BaseNameHashValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                                &lt;span class=&quot;c1&quot;&gt;//0x108&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_LDR_DLL_LOAD_REASON&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoadReason&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                   &lt;span class=&quot;c1&quot;&gt;//0x10c&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ImplicitPathOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                              &lt;span class=&quot;c1&quot;&gt;//0x110&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReferenceCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                                   &lt;span class=&quot;c1&quot;&gt;//0x114&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DependentLoadFlags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                               &lt;span class=&quot;c1&quot;&gt;//0x118&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;UCHAR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SigningLevel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                                     &lt;span class=&quot;c1&quot;&gt;//0x11c&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;tls-表&quot;&gt;TLS 表&lt;/h1&gt;

&lt;p&gt;Windows TLS (Thread Local Storage) 机制意在为每个线程提供的独立的存储空间，分为动态 TLS 和静态 TLS，动态 TLS 自然不必多说，通过 Windows Api 实现，而静态 TLS 则关乎 PE 的 TLS 表。&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;_IMAGE_TLS_DIRECTORY64&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ULONGLONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StartAddressOfRawData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ULONGLONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EndAddressOfRawData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ULONGLONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AddressOfIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;// PDWORD&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ULONGLONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AddressOfCallBacks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// PIMAGE_TLS_CALLBACK *;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;DWORD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SizeOfZeroFill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;DWORD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Characteristics&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;DWORD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Reserved0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;DWORD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Alignment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;DWORD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Reserved1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DUMMYSTRUCTNAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DUMMYUNIONNAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IMAGE_TLS_DIRECTORY64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在装载 pe 的时候，ntdll 使用 LdrpAllocateTlsEntry 为每个 image 分配 tls 表项，具体来说就是找到 image 的 tls 表，然后在内存中分配一个 buffer 将表中的数据拷贝到 buffer 中，并调用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LdrpAcquireTlsIndex&lt;/code&gt; 为这个 tls entry 分配一个 index（也就是 tls index），最后将这块 buffer 加入一个双向链表 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LdrpTlsList&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;在分配完 index 后，对于 LdrpTlsList 中的每个 tls entry，ntdll 将其包含的静态 tls data 写入 teb 中的 ThreadLocalStoragePointer 指向的数组中。&lt;/p&gt;

&lt;p&gt;如果反汇编一段读取静态 tls 数据的代码，我们就可以看到，程序通过 tlsindex 在 ThreadLocalStoragePointer 中读取了数据。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-asm&quot;&gt; mov eax,108                            
 mov eax,eax                            
 mov ecx,dword ptr ds:[&amp;lt;_tls_index&amp;gt;]    
 mov rdx,qword ptr gs:[58]           
 add rax,qword ptr ds:[rdx+rcx*8]       
 mov r9d,1                              
 xor r8d,r8d                            
 mov rdx,rax               
 xor ecx,ecx                            
 call qword ptr ds:[&amp;lt;&amp;amp;MessageBoxA&amp;gt;]     

&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;最近几个月一直没有写博客，这篇文章写得也很简略，一方面因为脑子里确实没什么东西，另一方面也因为工作换了，精力少了很多，我也不确定这个系列是否能写完。虽然本文技术上的内容没有写多少，但是还有其他话想说正。如我去年所写的，“事情的发展总是凡人难以预料的，通过渗透入门安全的时候我无论如何也不会想到三年后已经早已不再接触渗透”，如今这似乎像预言一样的东西确实兑现了。尽管现在做的东西已经不属于安全行业了，但是我仍然认为它跟安全有着联系，我也仍然认为我是一个搞安全的。&lt;/p&gt;

&lt;p&gt;最后仿写一段本人刚刚接触二进制时看到的一篇大佬的文章末尾写的话，我觉得此时此刻恰如彼时彼刻：&lt;/p&gt;

&lt;p&gt;写这篇文章时笔者不禁想起了几年前刚成为黑客只是想绕过 360 做免杀的自己，如今几年过去了以笔者的能力自认为做到完美的免杀变成易如反掌的事情了，但是笔者却成为了一个送外卖的外卖小哥. 安全路漫漫, 要学的东西还有很多。&lt;/p&gt;</content><author><name></name></author><category term="windows" /><summary type="html">我接触 Windows 最开始看的两本书是《PE 权威指南》和《Windows 核心编程》，学这两本书的目的也很简单：实现内存加载。我们知道，要实现内存加载，最重要的是处理 PE 中的三个表：导入表，iat 和重定位表。然而跟 pe 装载有关系的表却不仅仅只有这三个，那么剩下的表都有着怎样的内容？在 PE 的装在过程中发挥了什么样的作用？</summary></entry><entry><title type="html">What It Says Is Not What It eXecute</title><link href="https://citrusice.github.io/posts/what-it-says-is-not-what-it-execute/" rel="alternate" type="text/html" title="What It Says Is Not What It eXecute" /><published>2023-02-24T16:08:51+08:00</published><updated>2023-02-24T16:08:51+08:00</updated><id>https://citrusice.github.io/posts/what-it-says-is-not-what-it-execute</id><content type="html" xml:base="https://citrusice.github.io/posts/what-it-says-is-not-what-it-execute/">&lt;p&gt;对于每个程序员来说，编程时最依赖也最为可靠的便是官方给的文档以及 sdk 中的种种信息。然而即便是官网文档，其内容也并非完全正确。本文将分享我最近调试的两个bug。&lt;/p&gt;

&lt;h1 id=&quot;enumdesktops&quot;&gt;EnumDesktops&lt;/h1&gt;

&lt;p&gt;这是一个枚举指定 window station 上所有 desktop 的函数&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;EnumDesktopsA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;optional&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HWINSTA&lt;/span&gt;          &lt;span class=&quot;n&quot;&gt;hwinsta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;           &lt;span class=&quot;n&quot;&gt;DESKTOPENUMPROCA&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lpEnumFunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;           &lt;span class=&quot;n&quot;&gt;LPARAM&lt;/span&gt;           &lt;span class=&quot;n&quot;&gt;lParam&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;关于第一个参数，文档写的是如果是 NULL 则当前的 window station 会被使用&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[in, optional] hwinsta&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;A handle to the window station whose desktops are to be enumerated. This handle is returned by the &lt;a href=&quot;https://learn.microsoft.com/en-us/windows/desktop/api/winuser/nf-winuser-createwindowstationa&quot;&gt;CreateWindowStation&lt;/a&gt;, &lt;a href=&quot;https://learn.microsoft.com/en-us/windows/desktop/api/winuser/nf-winuser-getprocesswindowstation&quot;&gt;GetProcessWindowStation&lt;/a&gt;, or &lt;a href=&quot;https://learn.microsoft.com/en-us/windows/desktop/api/winuser/nf-winuser-openwindowstationa&quot;&gt;OpenWindowStation&lt;/a&gt; function, and must have the WINSTA_ENUMDESKTOPS access right. For more information, see &lt;a href=&quot;https://learn.microsoft.com/en-us/windows/desktop/winstation/window-station-security-and-access-rights&quot;&gt;Window Station Security and Access Rights&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If this parameter is NULL, the current window station is used.&lt;/p&gt;

&lt;p&gt;实际上当 window station 为 NULL 时则会在回调中返回 winstation 的列表，也就是说此时该函数并不会返回desktop的列表，而是返回所有window station的列表。&lt;/p&gt;

&lt;p&gt;调用链：
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user32!InternalEnumObjects&lt;/code&gt; &amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NtUserBuildNameList&lt;/code&gt; &amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_BuildNameList&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;根据代码可以看到，当给 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_BuildNameList&lt;/code&gt; 传入的 pwinsta 为 NULL 时，该函数返回的是 winstation 的列表&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;cm&quot;&gt;/*
     * If we're enumerating windowstations, pwinsta is NULL.  Otherwise,
     * we're enumerating desktops.
     */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pwinsta&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pobj&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PBYTE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grpWinStaList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;amDesired&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WINSTA_ENUMERATE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pGenericMapping&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WinStaMapping&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;iNext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FIELD_OFFSET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WINDOWSTATION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rpwinstaNext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pobj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PBYTE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pwinsta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rpdeskList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;amDesired&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DESKTOP_ENUMERATE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pGenericMapping&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DesktopMapping&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;iNext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FIELD_OFFSET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DESKTOP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rpdeskNext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;zwmapviewofsection&quot;&gt;ZwMapViewOfSection&lt;/h1&gt;

&lt;p&gt;这倒不是 msdn 上文档出错，而是我不知道从哪搞过来的一份 ntdll 声明出错了。&lt;/p&gt;

&lt;p&gt;MSDN 上函数的声明&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;NTSYSAPI&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NTSTATUS&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ZwMapViewOfSection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;                &lt;span class=&quot;n&quot;&gt;HANDLE&lt;/span&gt;          &lt;span class=&quot;n&quot;&gt;SectionHandle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;                &lt;span class=&quot;n&quot;&gt;HANDLE&lt;/span&gt;          &lt;span class=&quot;n&quot;&gt;ProcessHandle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;           &lt;span class=&quot;n&quot;&gt;PVOID&lt;/span&gt;           &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BaseAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;                &lt;span class=&quot;n&quot;&gt;ULONG_PTR&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;ZeroBits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;                &lt;span class=&quot;n&quot;&gt;SIZE_T&lt;/span&gt;          &lt;span class=&quot;n&quot;&gt;CommitSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;optional&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PLARGE_INTEGER&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;SectionOffset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;           &lt;span class=&quot;n&quot;&gt;PSIZE_T&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;ViewSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;                &lt;span class=&quot;n&quot;&gt;SECTION_INHERIT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InheritDisposition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;                &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt;           &lt;span class=&quot;n&quot;&gt;AllocationType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;                &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt;           &lt;span class=&quot;n&quot;&gt;Win32Protect&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;头文件中的声明&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;NTSYSAPI&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;NTSTATUS&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;NTAPI&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;ZwMapViewOfSection&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HANDLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SectionHandle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HANDLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ProcessHandle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OUT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PVOID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BaseAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ZeroBits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CommitSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OUT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PLARGE_INTEGER&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SectionOffset&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OPTIONAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OUT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ViewSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SECTION_INHERIT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InheritDisposition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AllocationType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Protect&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;可以看到 CommitSize 和 ZeroBits 的大小在 x64 的情况下是不对的，ULONG 是 4 字节而 ULONG_PTR 和 SIZE_T 都是 8 字节。这就导致了在传参的时候，原来栈上杂乱的数据会影响到这两个参数的高位，导致传参不正确。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;之前读了一篇关于代码分析的论文，名字叫《What You See Is Not What You eXecute》，所以我就也模仿了一下起了这么一个标题。&lt;/p&gt;</content><author><name></name></author><category term="debugging" /><summary type="html">对于每个程序员来说，编程时最依赖也最为可靠的便是官方给的文档以及 sdk 中的种种信息。然而即便是官网文档，其内容也并非完全正确。本文将分享我最近调试的两个bug。</summary></entry></feed>